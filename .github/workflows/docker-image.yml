name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  generate_certificate:
    if: ${{ contains(github.event.head_commit.message, 'generate a new certificate') }}

    runs-on: ubuntu-latest
    steps:
    - name: checkout  
      uses: actions/checkout@v3      
      
    - name: install acme
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        GH_TOKEN: ${{ secrets.GH_TOKEN }} 

      run: |
        # git clone https://github.com/acmesh-official/acme.sh.git
        # cd ./acme.sh
        # ./acme.sh --install -m zouaoui.faycal.p@gmail.com
        # env
        # /home/runner/.acme.sh/acme.sh --issue  -d wedreamteam.com  --dns dns_aws --keylength 4096 --server letsencrypt
        # cp /home/runner/.acme.sh/wedreamteam.com/wedreamteam.com.cer wedreamteam.com.pem
        # cp /home/runner/.acme.sh/wedreamteam.com/wedreamteam.com.key .
        openssl req -config cert.conf -newkey rsa:2048 -nodes -keyout wedreamteam.com.key -x509 -days 365 -out wedreamteam.com.pem
        cat wedreamteam.com.key > wedreamteam.com.key
        cat wedreamteam.com.pem > wedreamteam.com.pem
        gh secret set CERTIFICATE < wedreamteam.com.pem
        gh secret set KEY < wedreamteam.com.key     

  build:
    if: ${{ !contains(github.event.head_commit.message, 'build') }}
    runs-on: ubuntu-latest  
    needs: generate_certificate
    steps:
    - name: checkout  
      uses: actions/checkout@v3   

    - name: Get certificate from Gen-cert Job 
      env: 
        CERTIFICATE: ${{ secrets.CERTIFICATE }} 
        KEY: ${{ secrets.KEY }} 
      run: |
        echo $CERTIFICATE > wedreamteam.com.pem
        echo $KEY > wedreamteam.com.key

    - name: Build the Docker image
      run: ls &&  docker build . --file Dockerfile --tag tls:$(date +%s)

    - name: ecr login  
      uses: kciter/aws-ecr-action@v4
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        repo: tls
        region: eu-west-3
        tags: latest
        create_repo: true
        image_scanning_configuration: false
        set_repo_policy: false

  deploy:
    runs-on: ubuntu-latest  
    needs: build
    steps:
    - name: restart task   
      run: aws ecs  update-service --cluster tls --service tls-svc --force-new-deployment
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_EC2_METADATA_DISABLED: true
        AWS_REGION: "eu-west-3"

name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
  GH_TOKEN: ${{ secrets.GH_TOKEN }} 
  AWS_REGION: "eu-west-3"

jobs:
  build:
    runs-on: ubuntu-latest  
    steps:

    - name: checkout  
      uses: actions/checkout@v3   

    - name: install acme
      if: ${{ contains(github.event.head_commit.message, 'certificate') }}
      run: |
        git clone https://github.com/acmesh-official/acme.sh.git
        cd ./acme.sh
        ./acme.sh --install -m zouaoui.faycal.p@gmail.com
        env
        /home/runner/.acme.sh/acme.sh --issue  -d wedreamteam.com  --dns dns_aws --keylength 4096 --server letsencrypt
        cp /home/runner/.acme.sh/wedreamteam.com/wedreamteam.com.cer $GITHUB_WORKSPACE/wedreamteam.com.pem
        cp /home/runner/.acme.sh/wedreamteam.com/wedreamteam.com.key $GITHUB_WORKSPACE/.
        # openssl req -config cert.conf -newkey rsa:2048 -nodes -keyout wedreamteam.com.key -x509 -days 365 -out wedreamteam.com.pem

    - name: Build the Docker image
      if: ${{ contains(github.event.head_commit.message, 'build') }}
      run: cd $GITHUB_WORKSPACE &&  docker build . --file Dockerfile --tag tls:$(date +%s)

    - name: ecr login  
      if: ${{ contains(github.event.head_commit.message, 'build') }}
      uses: kciter/aws-ecr-action@v4
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        repo: tls
        region: eu-west-3
        tags: latest
        create_repo: true
        image_scanning_configuration: false
        set_repo_policy: false

  deploy:
    runs-on: ubuntu-latest  
    needs: build
    steps:
    - name: restart task   
      run: aws ecs  update-service --cluster tls --service tls-svc --force-new-deployment
      env:
        AWS_EC2_METADATA_DISABLED: true

  record_dns:
    runs-on: ubuntu-latest
    needs: deploy
    steps: 
      - name: checkout  
        uses: actions/checkout@v3         

      - name: create a record dns 
        run: ./recod.sh        
